# Orthanc - A Lightweight, RESTful DICOM Store
# Copyright (C) 2012-2015 Sebastien Jodogne, Medical Physics
# Department, University Hospital of Liege, Belgium
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


cmake_minimum_required(VERSION 2.8)

project(OrthancWebViewer)

set(ORTHANC_WEBVIEWER_VERSION "1.0")


# Parameters of the build
set(STATIC_BUILD OFF CACHE BOOL "Static build of the third-party libraries (necessary for Windows)")
SET(STANDALONE_BUILD ON CACHE BOOL "Standalone build (all the resources are embedded, necessary for releases)")
set(ALLOW_DOWNLOADS OFF CACHE BOOL "Allow CMake to download packages")

# Advanced parameters to fine-tune linking against system libraries
set(USE_SYSTEM_BOOST ON CACHE BOOL "Use the system version of Boost")
set(USE_SYSTEM_GDCM ON CACHE BOOL "Use the system version of Grassroot DICOM (GDCM)")
set(USE_SYSTEM_GOOGLE_TEST ON CACHE BOOL "Use the system version of Google Test")
set(USE_SYSTEM_JSONCPP ON CACHE BOOL "Use the system version of JsonCpp")
set(USE_SYSTEM_LIBJPEG ON CACHE BOOL "Use the system version of libjpeg")
set(USE_SYSTEM_LIBPNG ON CACHE BOOL "Use the system version of libpng")
set(USE_SYSTEM_ZLIB ON CACHE BOOL "Use the system version of zlib")
set(USE_SYSTEM_SQLITE ON CACHE BOOL "Use the system version of SQLite")

# Distribution-specific settings
set(USE_GTEST_DEBIAN_SOURCE_PACKAGE OFF CACHE BOOL "Use the sources of Google Test shipped with libgtest-dev (Debian only)")
mark_as_advanced(USE_GTEST_DEBIAN_SOURCE_PACKAGE)

include(CheckIncludeFiles)
include(CheckIncludeFileCXX)
include(CheckLibraryExists)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/Compiler.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/AutoGeneratedCode.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/DownloadPackage.cmake)

include(${CMAKE_SOURCE_DIR}/Resources/CMake/BoostConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/GdcmConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/GoogleTestConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/JsonCppConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/LibJpegConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/LibPngConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/ZlibConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Resources/CMake/SQLiteConfiguration.cmake)

include(${CMAKE_SOURCE_DIR}/Resources/CMake/JavaScriptLibraries.cmake)


# Check that the Orthanc SDK headers are available or download them
if (STATIC_BUILD)
  set(ORTHANC_SDK_URL "http://orthanc.googlecode.com/hg-history/Orthanc-0.8.6")
  file(MAKE_DIRECTORY ${AUTOGENERATED_DIR}/orthanc)
  file(DOWNLOAD "${ORTHANC_SDK_URL}/Plugins/Include/OrthancCPlugin.h"
    "${AUTOGENERATED_DIR}/orthanc/OrthancCPlugin.h" SHOW_PROGRESS)
  if (${MSVC})
    add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
    file(DOWNLOAD "${ORTHANC_SDK_URL}/Resources/ThirdParty/VisualStudio/stdint.h" 
      "${AUTOGENERATED_DIR}/stdint.h" SHOW_PROGRESS)
  endif()
else ()
  CHECK_INCLUDE_FILE_CXX(orthanc/OrthancCPlugin.h HAVE_ORTHANC_H)
  if (NOT HAVE_ORTHANC_H)
    message(FATAL_ERROR "Please install the headers of the Orthanc plugins SDK")
  endif()
endif()


if (STANDALONE_BUILD)
  add_definitions(
    -DORTHANC_STANDALONE=1
    )
  set(EMBEDDED_RESOURCES
    WEB_VIEWER  ${CMAKE_SOURCE_DIR}/WebApplication
    )
else()
  add_definitions(
    -DORTHANC_STANDALONE=0
    -DWEB_VIEWER_PATH="${CMAKE_SOURCE_DIR}/WebApplication/"
    )
endif()

EmbedResources(
  ORTHANC_EXPLORER  ${CMAKE_SOURCE_DIR}/Resources/OrthancExplorer.js
  JAVASCRIPT_LIBS   ${JAVASCRIPT_LIBS_DIR}
  ${EMBEDDED_RESOURCES}
  )

add_definitions(
  -DORTHANC_SQLITE_STANDALONE=1
  )

set(CORE_SOURCES
  ${BOOST_SOURCES}
  ${JSONCPP_SOURCES}
  ${SQLITE_SOURCES}
  ${LIBJPEG_SOURCES}
  ${ZLIB_SOURCES}
  ${LIBPNG_SOURCES}

  # Sources inherited from Orthanc core
  ${CMAKE_SOURCE_DIR}/Orthanc/ChunkedBuffer.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Enumerations.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/FileStorage/FilesystemStorage.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/ImageFormats/ImageAccessor.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/ImageFormats/ImageBuffer.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/ImageFormats/ImageProcessing.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/ImageFormats/PngWriter.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/MultiThreading/SharedMessageQueue.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/OrthancException.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/SQLite/Connection.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/SQLite/FunctionContext.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/SQLite/Statement.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/SQLite/StatementId.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/SQLite/StatementReference.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/SQLite/Transaction.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Toolbox.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Uuid.cpp
  ${CMAKE_SOURCE_DIR}/Resources/ThirdParty/base64/base64.cpp

  ${CMAKE_SOURCE_DIR}/Plugin/Cache/CacheManager.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Cache/CacheScheduler.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/JpegWriter.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/ViewerToolbox.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/SeriesVolumeSorter.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/ViewerPrefetchPolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/InstanceInformation.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/InstanceInformationAdapter.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/SeriesInformationAdapter.cpp
  )

add_library(OrthancWebViewer
  SHARED
  ${CORE_SOURCES}
  ${AUTOGENERATED_SOURCES}
  ${CMAKE_SOURCE_DIR}/Plugin/Plugin.cpp

  # The following files depend on GDCM
  ${CMAKE_SOURCE_DIR}/Plugin/ParsedDicomImage.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/DecodedImageAdapter.cpp
  )

if (STATIC_BUILD OR NOT USE_SYSTEM_GDCM)
  add_dependencies(OrthancWebViewer GDCM)
endif()

target_link_libraries(OrthancWebViewer ${GDCM_LIBRARIES} ${OS_LIBRARIES})

message("Setting the version of the library to ${ORTHANC_WEBVIEWER_VERSION}")

add_definitions(-DORTHANC_WEBVIEWER_VERSION="${ORTHANC_WEBVIEWER_VERSION}")

set_target_properties(OrthancWebViewer PROPERTIES 
  VERSION ${ORTHANC_WEBVIEWER_VERSION} 
  SOVERSION ${ORTHANC_WEBVIEWER_VERSION})

install(
  TARGETS OrthancWebViewer
  RUNTIME DESTINATION lib    # Destination for Windows
  LIBRARY DESTINATION share/orthanc/plugins    # Destination for Linux
  )

add_executable(UnitTests
  ${CORE_SOURCES}
  ${GTEST_SOURCES}
  UnitTestsSources/UnitTestsMain.cpp
  )

target_link_libraries(UnitTests ${OS_LIBRARIES})
